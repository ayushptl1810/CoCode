# -*- coding: utf-8 -*-
"""Co-Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q5XnDnYcXO6RKvua7Ntxko5VOTpQqRXp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/student_performance_data.csv')

df.head()

df.columns

df['quiz_marks'] = df['quiz1-marks']+df['quiz2-marks']+df['quiz3-marks']
df = df.drop(['quiz1-marks','quiz2-marks','quiz3-marks','attempt_count'], axis=1)
df.head()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X = df.drop(['correct_percentage'], axis=1)
y = df[['correct_percentage']]

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score

y_pred = rf_model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# prompt: write a function to predict the correct percentage by providing the required features

import numpy as np

def predict_correct_percentage(previous_difficulty, time_taken, topic_mastery,quiz_marks):
  """
  Predicts the correct percentage based on the provided features using a trained RandomForestRegressor model.

  Args:
    previous_difficulty: The difficulty of the previous question.
    time_taken: The time taken to answer the previous question.
    topic_mastery: The student's mastery of the topic.
    previous_marks: The student's marks on the previous question.
    attempt_count: The number of attempts the student made on the previous question.

  Returns:
    The predicted correct percentage.
  """

  # Create a NumPy array with the input features
  input_data = np.array([[previous_difficulty, time_taken, topic_mastery,quiz_marks]])

  # Use the trained model to make a prediction
  predicted_percentage = model.predict(input_data)[0]

  return predicted_percentage

predict_correct_percentage(0.2,0.52,0.89,0.27)

import pickle

with open('updated_model.pkl', 'wb') as file:
    pickle.dump(model, file)

